#include "UDPMultiCast/UDPMultiCast.h"
#include "UDPMultiCast/utils.h"

#include <string>
#include <iostream>

#include "UDPMultiCast/strHash.h"

int _tmain(int argc, _TCHAR* argv[])
{
    UDPMultiCast udp;
    printf("build from git revision ID %s\n", udp.getGitRefID().c_str());
    udp.setPort(4444);
    udp.init();
    udp.setLoopBack(TRUE);

    timeUtils::getTimeStamp();  // warmup timestamper

#ifdef HAS_TOBII_INTEGRATION
    udp.connectToTobii("tet-tcp://169.254.5.224");
    udp.setTobiiScrSize({1920., 1080.});
    udp.setTobiiSampleRate(600.f);
    udp.startTobiiDataSender();
    std::cin.ignore();  // wait for any key press
    udp.removeTobiiDataSender();
    std::vector<message> dataMsgs = udp.getData();
#else

    // send a bunch of messages
    for (int i = 0; i < 2048; i++)
    {
        udp.sendWithTimeStamp("dat,1," + std::to_string(i), ',');
    }
    std::vector<message> dataMsgs = udp.getData();
    for (int i = 0; i < 20; i++)
    {
        udp.sendWithTimeStamp("dat,2," + std::to_string(i));	// testing default delimiter
    }
    std::vector<message> dataMsgs2 = udp.getData();


    // send a bunch of messages
    for (int i = 0; i < 10; i++)
    {
        udp.send("cmd");	// testing empty string in message struct
    }
    std::vector<message> cmdMsgs = udp.getCommands();
#endif

    // send exit msg
    std::cout << "nThreads active: " << udp.checkReceiverThreads() << std::endl;
    udp.send("exit");
    std::cout << "nThreads active: " << udp.checkReceiverThreads() << std::endl;

    // clean up
    udp.deInit();
    std::cout << "nThreads active: " << udp.checkReceiverThreads() << std::endl;
    

    return 0;
}


// function for handling errors generated by lib
void DoExitWithMsg(std::string errMsg_)
{
    std::cout << errMsg_ << std::endl;
    exit(0);
}